<!DOCTYPE html>
<html>
</html>
<head>
  <meta charset="utf-8">
  <title>Text Explorer</title>
  <link href="bootstrap.min.css" rel="stylesheet">
  <script type="text/javascript" src="angular-1.2.9.min.js"></script>
  <script src="jquery-1.10.2.min.js"></script>

  <script type="text/javascript" src="underscore-min.js"></script>
  <script type="text/javascript" src="text-explorer-ctrl.js"></script>

  <style>body {
    padding: 20px;
  }

  .denuncia {
    padding: 4px;
    background-color: #e3e3e3;
    margin-bottom: 10px;
  }

  span.resaltado {
    background-color: yellow;
  }

  .errorMessage {
    color: red;
  }

  ins {
    background-color: #90ee90;
    color: darkgreen;
  }

  del {
    background-color: lightpink;
    color: maroon;
  }

  table td.count {
    text-align: right;
    padding-right: 20px;
    color: blue;
  }

  input.invalid {
    background-color: pink;
    color: darkred;
  }

  #files {
    display: inline-block;
  }

  body {
    padding-top: 5px;
  }

  #prompt {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
  }
  #prompt .dialog{
    background-color: white;
    box-shadow: 0px 0px 10px black;
    border-radius: 5px;
    padding: 10px;
    z-index: 1;
    top: 20%;
    left: 20%;
    width: 60%;
    height: auto;
  }

  .inputfile{
    width: 0.1px;
    height: 0.1px;
    opacity: 0;
    overflow: hidden;
    position: absolute;
    z-index: -1;
  }

  </style>
</head>
<body ng-app="pruebas">
<div ng-controller="TextExplorerCtrl" class="results">
  <div class="row">
    <div id="drop_zone" class="text-center alert alert-info"><strong>Drop</strong> files here or &nbsp;&nbsp;
      <input id="file" type="file" name="file" class="inputfile"/>
      <label class="btn btn-primary" for="file">Choose a file</label>
      &nbsp;&nbsp;or&nbsp;&nbsp;
      <span class="btn btn-primary" ng-click="pasteText()">Paste text here</span>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6">
      <input type="text" ng-class="{invalid: invalidRegexp}" class="form-control" placeholder="Filter with a regexp..."
             style="width: 90%;"
             ng-model="filtroTexto">
    </div>
    <div class="col-md-6 form-inline">
      <label>Use RegExp:
        <input type="checkbox" ng-model="forceRegexp"/>
      </label>
      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
      <label>
        Max chars before/after match:
        <input style="width: 50px;" type="text" ng-model="radio" class="form-control">
      </label>
    </div>
  </div>
  <!--<h3 ng-show="filtroTexto">'{{filtroTexto}}'</h3>-->
  <!--<h3 ng-show="!filtroTexto">&nbsp;</h3>-->
  <h4>
    <span ng-show="status" style="color: cornflowerblue">{{status}}</span>
    <span ng-hide="partial">{{filtradas.length}}</span>
    <span ng-hide="partial">matches</span>
    <span ng-hide="partial" style="color: #BBB">&nbsp;search in {{lastSearchTime}}ms</span>
    <span>&nbsp;</span>
  </h4>

  <div class="resultsarea row">
    <div class="col-md-8">
      <div ng-repeat="den in filtradas.slice(0,shownRows) track by $index" class="denuncia">
        <!--<h4>{{den.marcaAuto}} {{den.modeloAutoBase}} - <span ng-bind-html="resaltarResultado(den.titulo)"><span></h4>-->

        <!--<em ng-bind-html="resaltarResultado(den.titulo)"></em>-->
        <div ng-bind-html="resaltarResultado(den)"></div>
      </div>
      <div ng-show="filtradas.length > shownRows" class="btn btn-primary btn-large" ng-click="shownRows = shownRows + 50">
        Show 50 more
      </div>
    </div>
    <div class="col-md-4">
      <h4>Top 100 matches ({{_.keys(topMatches).length}} unique matches)</h4>
      <table style="width: 100%">
        <tr ng-repeat="tuple in topMatches.slice(0, 100)">
          <td>{{tuple['0']}}</td>
          <td><strong>{{tuple['1']}}</strong></td>
        </tr>
      </table>

      <div ng-if="_.keys(topMatches).length > 100">
        <h4>Bottom 100 matches ({{_.keys(topMatches).length}} unique matches)</h4>
        <table style="width: 100%">
          <tr ng-repeat="tuple in topMatches.slice(-100)">
            <td>{{tuple['0']}}</td>
            <td><strong>{{tuple['1']}}</strong></td>
          </tr>
        </table>
      </div>
    </div>
  </div>
</div>

<div id="prompt" class="">
  <div class="dialog">
    <textarea class="form-control" rows="10"></textarea>
    <div>
      <br>
      <a href="javascript:promptCancel()" class="btn btn-default">Cancel</a>
      &nbsp;
      <a href="javascript:promptDone()" class="btn btn-primary">Send pasted text</a>
    </div>
  </div>
</div>

<script>
  // Home made really simple dialog
  (function($prompt){
    $prompt.hide()
    var promptCallback = null;

    window.promptDone = function(){
      var text = $("textarea", $prompt).val();
      if(text && promptCallback){
        promptCallback(text)
      }
      $prompt.hide();
    }

    $prompt.keyup(e => e.keyCode == 27 ? promptCancel() : null)
    $prompt.click(() => $prompt.hide())
    $("div.dialog", $prompt).click((e) =>  e.stopPropagation())

    window.promptCancel = function(){
      $prompt.hide();
    }

    window.promptText = function(msg, callback){
      promptCallback = callback
      $prompt.show()
      $("textarea", $prompt).focus()
    }
  })($("#prompt"))

  function readFileAsText(file, cbk) {
    var reader = new FileReader();

    function errorHandler(evt) {
      switch (evt.target.error.code) {
        case evt.target.error.NOT_FOUND_ERR:
          alert('File Not Found!');
          break;
        case evt.target.error.NOT_READABLE_ERR:
          alert('File is not readable');
          break;
        case evt.target.error.ABORT_ERR:
          break; // noop
        default:
          alert('An error occurred reading this file.');
      }
    }

    function updateProgress(evt) {
      // evt is an ProgressEvent.
      if (evt.lengthComputable) {
        var percentLoaded = Math.round((evt.loaded / evt.total) * 100);

        if (percentLoaded < 100) {
          angular.element($(".resultsarea")).scope().loadingFileProgress(`Loading ${percentLoaded}% (${file.name})`);
        }
      }
    }

    reader.onerror = errorHandler;
    reader.onprogress = updateProgress;
    reader.onabort = function(e) {
      alert('File read cancelled');
    };
    reader.onloadstart = function(e) {

    };
    reader.onload = function(e) {
      // Ensure that the progress bar displays 100% at the end.
      angular.element($(".resultsarea")).scope().loadingFileProgress(`Loading ${100}% (${file.name})`);
      setTimeout(function() {
        cbk(reader.result);
      }, 20);
    };
    // Read in the image file as a binary string.
    reader.readAsText(file);
  }

  function handleFileSelect(evt) {
    evt.stopPropagation();
    evt.preventDefault();

    var files = evt.dataTransfer ? evt.dataTransfer.files : evt.target.files; // FileList object.

    if (files.length != 1) {
      $('#list').text("Dragging only one file is supported");
    } else {
      var name1 = files[0].name;

      readFileAsText(files[0], function(file1) {
        angular.element($(".resultsarea")).scope().fileLoaded(file1, name1);
      });
    }
  }

  function handleDragOver(evt) {
    evt.stopPropagation();
    evt.preventDefault();
    evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
  }

  // Setup the dnd listeners.
  var dropZone = document.getElementById('drop_zone');
  dropZone.addEventListener('dragover', handleDragOver, false);
  dropZone.addEventListener('drop', handleFileSelect, false);
  document.getElementById('file').addEventListener('change', handleFileSelect, false);
</script>
</body>
